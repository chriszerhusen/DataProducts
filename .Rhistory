g <- ggplot(diamond, aes(carat, price))
g + geom_point()
g + geom_point() + geom_line(reg)
g + geom_point() + geom_line()
g + geom_point() + geom_line(stat=lm)
g + geom_point() + geom_line(method=lm)
g + geom_point() + geom_smooth(method=lm)
reg$qr
reg$rank
reg$model
reg$terms
cor(diamond$price, diamond$carat)
summary(reg)
data(mtcars)
g <- ggplot(mtcars)
View(mtcars)
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), lwd=4, col="magenta")
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(pm25, col="green", data=east)
hist(east$pm25, col="green")
hist(subset(pollution, region=="west"), col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)ab
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, mean="West")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv, method=loess)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv, method="loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4, alpha=.5)
g + geom_point(aes(color=drv), size=4, alpha=.5)
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color=drv), size=2, alpha=.5) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = times)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(mxy, myy))
g <- ggplot(testdat, aes(x=mxy, y=myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
View(testdat)
g <- ggplot(testdat, aes(x = x, y = y)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
info()
skip()
g <- g + geom_line()
g + geom_line()
skip()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y= hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
resid(lm(x~y))
?t.test
t.test(x,y)
plot(x~y)
abline(lm(x~y))
?plot
plot(x,y)
?lm
plot(x~y)
plot(x,y)
abline(lm(y~x))
reg <- lm(y~x)
reg
summary(reg)
data(mtcars)
reg <- lm(mpg~wt)
reg <- with(mtcars, lm(mpg~wt))
summary(reg)
with(mtcars, plot(wt, mpg))
abline(reg)
library(ggplot2)
reg$fitted.values
reg$model
reg$effects
reg$qr
predict(reg, mean(mtcars$wt), interval="prediction")
predict(reg, mean(mtcars$wt))
names(mtcars)
mean(mtcars$wt)
predict(reg)
predict(reg, newdata=mean(mtcars$wt))
mtcars$wt
predict(reg, newdata=data.frame(wt=mean(mtcars$wt)))
predict(reg, newdata=data.frame(wt=mean(mtcars$wt)), interval="prediction")
predict(reg, newdata=data.frame(wt=mean(mtcars$wt)), interval="confidence")
reg
predict(reg, newdata=data.frame(wt=3), interval="confidence")
predict(reg, newdata=data.frame(wt=3), interval="prediction")
summary(reg)
names(reg)
reg$model
summary(reg)$coefficients
reg$df.residual
?confint
confint(reg)
summary(reg)
var(mtcars$wt)
.5591/1.8776
sum(reg$residuals)
sum(reg$df.residual)
library(caret)
install.packages("kernlab")
library(kernlab)
data(spam)
names(spam)
?train
names(getModelInfo())
install.packages("ISLR")
data(wages)
library(ISLR)
data(wages)
wages
?ISLR
data(wage)
data(Wage)
library(ggplot2)
head(Wage)
summary(Wage)
intraining <- createDataPartition(y=Wage$wage, p=.7, list=FALSE)
training <- Wage[intraining,]
testing <- Wage[-intraining,]
featurePlot(x=training[,c("age", "education", "jobclass")], y=training$wage, plot="pairs")
featurePlot(x=training, y=training$wage, plot="pairs")
unique(training$jobclass)
qplot(wage, color=education, data=training, geom="density")
qplot(wage, color=race, data=training, geom="density")
qplot(wage, color=race, data=training, geom="boxplot")
qplot(wage, race, data=training, geom="boxplot")
qplot(wage, race)
qplot(wage, race, data=training)
qplot(wage, race, data=training, geom="jitter")
qplot(wage, age, data="training")
qplot(wage, age, data=training)
qplot(age, wage, data=training)
lm(wage~age, data=training)
qplot(age, wage, data=training, geom="smooth")
qplot(age, wage, data=training, geom=c("point", "smooth")
)
qplot(maritl, wage, data=training, geom="jitter")
train(training, training$wage, method="glm")
train(wage, data=training, method="glm")
train(training$wage, data=training, method="glm")
train(wage~., data=training, method="glm")
library(kernlab)
data(spam)
library(ISLR)
library(caret)
data(Wage)
intraining <- createDataPartition(y=Wage$wage, p=.7, list=FALSE)
training <- Wage[intraining,]
testing <- Wage[-intraining,]
?table
table(training$jobclass)
table(training$maritl)
?table
table(training$jobclass, training$education)
?dummyVars
nearZeroVar(training)
nearZeroVar(training, saveMetrics = TRUE)
M <- abs(cor*training[,-58])
intraining <- createDataPartition(y=spam$type, p=.75, list=FALSE)
training <- spam[intraining,]
testing <- spam[-intraining,]
M <- abs(cor*training[,-58])
M <- abs(cor(training[,-58]))
diam(M) <- 0
diag(M) <- 0
which(M > 0.8, arr.ind=TRUE)
head(training$direct)
summary(training$direct)
plot(training$direct,training$num415)
plot(training$direct,training$num857)
plot(training$num415,training$num857)
featurePlot(x=training[,c("direct", "num415", "num857")], y=training$type, plot="pairs")
cortrain <- training[,c(32,34,40)]
components <- prcomp(cortrain)
components
typeColor <- ((spam$type=="spam")*1 +1)
typeColor <- ((training$type=="spam")*1 +1)
components <- prcomp(log10(training[,58]+1))
components <- prcomp(log10(training[,-58]+1))
components
plot(components$x[,1], components$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
components$rotation
preproc <- preProcess(log10(training[,-58]+1), method="pca", pcaComp=2)
spamPC <- predict(preproc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col = typeColor)
?predict
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
library(caret)
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
install.packages("caret")
install.packages("caret")
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
library(caret)
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
?train
modelFit <- train(training$type ~., method="glm", data=training)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
library(caret)
modelFit <- train(training$type ~., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$type, predict(modelFit, testing))
data("faithful")
data(faithful)
intrain <- createDataPartition(y=faithful$waiting, p=.7, list=FALSE)
training <- faithful[intrain,]
testing <- faithful[-intrain,]
head(training)
plot(training$eruptions, training$waiting)
reg <- lm(eruptions~waiting, data=training)
summary(reg)
abline(reg)
?abline
abline(reg)
abline(reg="lm")
reg<- lm(waiting~eruptions, data=training)
abline(reg)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
str(diagnosis)
head(diagnosis)
length(diagnosis)
plot(diagnosis)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(training$Superplasticizer)
log(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
dim(training)
?grep
grep("^IL", names(training))
?preProcess
preproc <- preProcess(training[,58:69], method="pca")
preproc
preproc$ranges
preproc$numComp
preproc <- preProcess(training[,58:69], method="pca", thresh=.9)
preproc
training <- training[,c(1,58:69)]
head(training)
?train
nopca <- train[training, training$diagnosis, method="glm"]
nopca <- train(training, training$diagnosis, method="glm")
warnings()
summary(nopca)
?predict
confusionMatrix(predict(nopca, testing))
nopca <- train(diagnosis~., data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(nopca, testing))
pca <- train(diagnosis~., data=training, preProcess="pca", method="glm")
confusionMatrix(testing$diagnosis, predict(pca, testing))
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
43+24+67+10+26
170/915
80+82+82+70
314/1487
2.62+2.67+2.3+2.18+2.08
11.85/5
2.77+2.69+2.65+2.2.6+2.45
2.77+2.69+2.65+2.6+2.45
13.16/5
data(swiss)
par(mfrow = c(2,2))
fit <- lm(Fertility ~ ., data=swiss)
plot(fit)
fit
hatvalues(fit)
data(mtcars)
fit <- lm(mpg ~ cylinders + wt, data=mtcars)
fit <- lm(mpg ~ cyl + wt, data=mtcars)
fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)
library(ggplot2)
gg <- ggplot(mtcars)
gg <- ggplot(mtcars, aes(y=mpg, x=wt, color=cyl))
gg
gg + geom_point()
gg <- ggplot(mtcars, aes(y=mpg, x=wt)
)
gg + facet_wrap(cyl)
gg + facet_wrap(facets=cyl)
gg + facet_wrap(facets=mtcars$cyl)
gg + facet_wrap(facets=mtcars$cyl) + geom_point()
gg + geom_point()
gg + geom_point() + facet_wrap(cyl~)
gg + geom_point() + facet_wrap(cyl~.)
fit2 <- lm(mpg~ factor(cyl), data=mtcars)
summary(fit)
summary(fit2)
fit3 <- lm(mpg~factor(cyl)*wt, data=mtcars)
summary(fit3)
plot(fit3)
plot(fit2)
plot(fit3)
anova(fit2,fit3)
anova(fit, fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(y~x)
plot(x,y)
?hatvalues
hat(x)
hatvalues(lm(y~x))
reg <- lm(y~x)
dfbeta(reg)
dfbetas(reg)
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
summary(segmentationOriginal)
training <- segmentationOriginal[Case=="Train",]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model <- train(training, y=Class, method="rpart")
model <- train(training, y=training$Class, method="rpart")
summary(model)
model <- train(Class~., data=training, method="rpart")
model$finalModel
set.seed(125)
model <- train(Class~., data=training, method="rpart")
model$finalModel
summary(training$Class)
?predict
predict(model, newdata=testing)
confusionMatrix(predict(model, newdata=testing))
confusionMatrix(testing, predict(model, newdata=testing))
confusionMatrix(testing$Class, predict(model, newdata=testing))
library(pgmm)
data(olive)
olive=olive[,-1]
names(olive)
model <- train(Area~., data=olive, method="rpart")
predict(model, newdata = as.data.frame(t(colMeans(olive))))
str(olive)
View(olive)
library(ElemStatLearn)
data(SAheart)
rm(testing)
rm(training)
rm(segmentationOriginal)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
model <- train(chd~tobacco+ldl+typea+obesity+alcohol+age, data=SAheart, method="glm", family="binomial")
model <- train(factor(chd)~tobacco+ldl+typea+obesity+alcohol+age, data=SAheart, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(model))
set.seed(13234)
model <- train(chd~tobacco+ldl+typea+obesity+alcohol+age, data=SAheart, method="glm", family="binomial")
missClass(SAheart$chd, predict(model))
set.seed(13234)
model <- train(chd~tobacco+ldl+typea+obesity+alcohol+age, data=trainSA, method="glm", family="binomial")
missClass(trainSA, predict(model))
missClass(testSA, newdata=predict(model, testSA))
predict(model)
missClass(trainSA$chd, predict(model))
missClass(testSA$chd, predict(model, newdata=testSA))
data(vowel.train)
rm(model)
data(vowel.test)
head(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
model <- train(y~., data=vowel.train, method="rf")
?varImp
varImp(model)
data(mtcars)
library(ggplot2)
g <- ggplot(mtcars)
g + geom_point(aes(hp, mpg))
g + geom_point(aes(hp, mpg, color=factor(am)))
g + geom_point(aes(hp, mpg, color=factor(am)), size=2)
g + geom_point(aes(hp, mpg, color=factor(am)), size=5)
g + geom_point(aes(wt, mpg), facets=(hp))
g + geom_point(aes(wt, mpg), facet=(hp))
g + geom_point(aes(wt, mpg))
g + geom_point(aes(hp, mpg, color=factor(am)), size=5)
g + geom_point(aes(hp, mpg, color=factor(am)), size=5) + facet_wrap(wt)
g + geom_point(aes(hp, mpg, color=factor(am)), size=5) + facet_wrap(wt, data=mtcars)
g + geom_point(aes(hp, mpg, color=factor(am)), size=5) + facet_wrap(wt)
summary(lm(mpg~factor(am)))
summary(lm(mpg~factor(am), data=mtcars))
g + geom_boxplot(aes(factor(am), mpg, fill=am))
g + geom_boxplot(aes(factor(am), mpg, fill=factor(am)))
mtcars$am <- factor(mtcars$am)
modelall <- lm(mpg~., data=mtcars)
summary(modelall)
anova(modelall)
model1 <- lm(mpg~am, data=mtcars)
anova(model1)
g + geom_point(aes(hp, disp))
?step
step(modelall)
View(mtcars)
modelstep <- lm(formula = mpg ~ wt + qsec + am, data = mtcars)
par(mfrow=c(2,2))
plot(modelstep)
summary(modelstep)
anova(modelstep)
clicking <- functions(clicks) {10*log(1+clicks^2)/10}
clicking <- function(clicks) {10*log(1+clicks^2)/10}
clicking(2000)
clicking(10000)
clicking(50000)
clicking(c(10000,20000,30000,40000,50000,60000,70000,80000,90000,100000))
clicking <- function(clicks) {log10(1+clicks^2)}
clicking(54000)
c <- seq(from=50000, to=100000, by=5000)
clicking(c)
c
23*51*16
7^1.1
21*48
1008^1.1
41*85*49
170765^1.1
24*25
21*49
library(devtools)
setwd("C:/Users/Chris/CourseraDataScience/DataProducts")
install.packages("gridExtra")
library(gridarrange)
library(gridExtra)
